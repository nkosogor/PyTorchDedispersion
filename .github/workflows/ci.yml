name: CI
on:
  push:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install torch --index-url https://download.pytorch.org/whl/cpu
          pip install -e .[dev,fil]
          pip install pytest-timeout

      - name: Show Python & Torch
        run: |
          python -V
          python - <<'PY'
          import torch
          print("torch", torch.__version__, "cuda?", torch.cuda.is_available())
          PY

      - name: Collect tests (sanity)
        run: pytest -q --collect-only

      # Run the single flaky/hanging test by exact node id (do NOT use -k here)
      - name: Debug single test (non-blocking)
        continue-on-error: true
        env:
          OMP_NUM_THREADS: "1"
          MKL_NUM_THREADS: "1"
          NUMEXPR_NUM_THREADS: "1"
          CUDA_VISIBLE_DEVICES: ""
        run: |
          pytest -vv -s \
            tests/dedispersion_test.py::TestDedispersion::test_best_dm \
            --timeout=120 --timeout-method=thread

      - name: Run full test suite with coverage
        env:
          OMP_NUM_THREADS: "1"
          MKL_NUM_THREADS: "1"
          NUMEXPR_NUM_THREADS: "1"
          CUDA_VISIBLE_DEVICES: ""
        run: |
          pytest -vv --durations=20 --maxfail=1 \
                 --timeout=60 --timeout-method=thread \
                 --cov=pytorch_dedispersion \
                 --cov-report=term-missing:skip-covered \
                 --cov-report=xml

      - name: Upload coverage.xml
        if: always() && hashFiles('coverage.xml') != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-${{ matrix.python-version }}
          path: coverage.xml

  #docs:
  #  runs-on: ubuntu-latest
  #  timeout-minutes: 10
  #  steps:
  #    - uses: actions/checkout@v4
  #   - uses: actions/setup-python@v5
  #      with:
  #       python-version: "3.11"
  #    - name: Install docs deps
   #     run: pip install .[docs]
   #   - name: Build docs (no deploy)
   #     run: mkdocs build --strict
